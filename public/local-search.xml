<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/13/hello-world/"/>
    <url>/2023/02/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>部署第一个Web云函数</title>
    <link href="/2023/02/12/deploy-first-cloud-function/"/>
    <url>/2023/02/12/deploy-first-cloud-function/</url>
    
    <content type="html"><![CDATA[<h3 id="后端主流部署环境"><a href="#后端主流部署环境" class="headerlink" title="后端主流部署环境"></a>后端主流部署环境</h3><p>区别于前端，目前后端主流部署环境有以下4种。</p><ol><li>云服务器，也云主机，包含轻量服务器和裸金属服务器</li><li>容器服务，一般是说Kubernets</li><li>App Engine。应用引擎，无需修改代码，可以无缝把老的代码部署到环境里面。腾讯云叫：云</li><li>云函数。<br><img src="/img/deploy-fist-cloud-function/app-engine-features.png" alt="云托管优势"></li></ol><p>DigitalOcean上四种服务都提供，名字简单明了，国内云服务厂商的名字叫的五花八门。<br><img src="/img/deploy-fist-cloud-function/digitalocean-menu.png" alt="DigitalOcean菜单"></p><h3 id="本地写好代码"><a href="#本地写好代码" class="headerlink" title="本地写好代码"></a>本地写好代码</h3><h3 id="控制台创建"><a href="#控制台创建" class="headerlink" title="控制台创建"></a>控制台创建</h3><p><img src="/img/deploy-fist-cloud-function/new-application.png" alt="image.png"></p><h3 id="运行查看"><a href="#运行查看" class="headerlink" title="运行查看"></a>运行查看</h3><h3 id="迁移注意事项"><a href="#迁移注意事项" class="headerlink" title="迁移注意事项"></a>迁移注意事项</h3>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>腾讯云</tag>
      
      <tag>Web云函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amazon-honeycode-component-1</title>
    <link href="/2022/12/27/amazon-honeycode-component-1/"/>
    <url>/2022/12/27/amazon-honeycode-component-1/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>敏捷入门</title>
    <link href="/2022/07/31/intro-alige/"/>
    <url>/2022/07/31/intro-alige/</url>
    
    <content type="html"><![CDATA[<h2 id="敏捷入门"><a href="#敏捷入门" class="headerlink" title="敏捷入门"></a>敏捷入门</h2><h2 id="敏捷团队"><a href="#敏捷团队" class="headerlink" title="敏捷团队"></a>敏捷团队</h2><h2 id="敏捷个人"><a href="#敏捷个人" class="headerlink" title="敏捷个人"></a>敏捷个人</h2><h2 id="常用“敏捷”工具"><a href="#常用“敏捷”工具" class="headerlink" title="常用“敏捷”工具"></a>常用“敏捷”工具</h2><h2 id="参考图书"><a href="#参考图书" class="headerlink" title="参考图书"></a>参考图书</h2>]]></content>
    
    
    <categories>
      
      <category>管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>敏捷管理</tag>
      
      <tag>Alige</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前后端分离下如何完成Web登录</title>
    <link href="/2021/08/08/how-to-login-with-frontend-and-backend/"/>
    <url>/2021/08/08/how-to-login-with-frontend-and-backend/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Web登录涉及到知识点"><a href="#1-Web登录涉及到知识点" class="headerlink" title="1 Web登录涉及到知识点"></a>1 Web登录涉及到知识点</h3><h4 id="1-1-HTTP无状态性"><a href="#1-1-HTTP无状态性" class="headerlink" title="1.1 HTTP无状态性"></a>1.1 HTTP无状态性</h4><blockquote><p>HTTP是无状态的，一次请求结束，连接断开，下次服务器再收到请求，它就不知道这个请求是哪个用户发过来的。当然它知道是哪个客户端地址发过来的，但是对于我们的应用来说，我们是靠用户来管理，而不是靠客户端。所以对我们的应用而言，它是需要有状态管理的，以便服务端能够准确的知道http请求是哪个用户发起的，从而判断该用户是否有权限继续这个请求。这个过程就是常说的<strong>会话管理</strong>。</p></blockquote><h4 id="1-2-登录流程"><a href="#1-2-登录流程" class="headerlink" title="1.2 登录流程"></a>1.2 登录流程</h4><p>登录的基本流程<br><img src="https://images2018.cnblogs.com/blog/59618/201808/59618-20180816092611781-493556035.png" alt="web-login-flow"></p><h3 id="2-同域登录"><a href="#2-同域登录" class="headerlink" title="2 同域登录"></a>2 同域登录</h3><p>目前大多数Web应用采用前后端分离方式进行开发。所以前端网站或应用都属于SPA（Single Page Application）。如果前端，后台API部署在同域下，不存在跨域的情况，登录方式相对简单。</p><h4 id="2-1-基于Session登录"><a href="#2-1-基于Session登录" class="headerlink" title="2.1 基于Session登录"></a>2.1 基于Session登录</h4><p>服务器端使用Session技术，浏览器端使用Cookie技术。</p><p><img src="https://images2015.cnblogs.com/blog/459873/201611/459873-20161115231400951-1095594983.png" alt="session-based-login"></p><ol><li><p>服务端session是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，可以用来存放数据。服务器为每一个session都分配一个唯一的sessionid，以保证每个用户都有一个不同的session对象。</p></li><li><p>服务器在创建完session后，会把sessionid通过cookie返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过cookie把sessionid传回给服务器，以便服务器能够根据sessionid找到与该用户对应的session对象。</p></li><li><p>session通常有失效时间的设定，比如2个小时。当失效时间到，服务器会销毁之前的session，并创建新的session返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的session的失效时间根据当前的请求时间再延长2个小时。</p></li><li><p>session在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往sesssion对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的session对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的session对象里的登录凭证清掉。所以在用户登录前或退出后或者session对象失效时，肯定都是拿不到需要的登录凭证的。</p></li></ol><h4 id="2-2-基于Token登录"><a href="#2-2-基于Token登录" class="headerlink" title="2.2 基于Token登录"></a>2.2 基于Token登录</h4><p><img src="https://images2015.cnblogs.com/blog/459873/201611/459873-20161120210044154-648255641.png" alt="token-based-login"></p><ol><li>用户在浏览器中输入用户和密码，后台服务器通过加密或者其他逻辑，生成一个Token。</li><li>前端获取到Token，存储到cookie或者localStorage中，在接下来的请求中，将token通过url参数或者HTTP Header头部传入到服务器</li><li>服务器获取token值，通过查找数据库判断当前token是否有效</li></ol><p>基于Token登录，而且可以用于第三方单点登录的OAuth2.0更适合。可以参考网址：<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></p><p>token传入示例：<br><img src="https://images2018.cnblogs.com/blog/59618/201808/59618-20180818023625525-463599259.png" alt="by-cookie"></p><p><img src="https://images2018.cnblogs.com/blog/59618/201808/59618-20180818023643013-2141566824.png" alt="by-http-header"></p><h3 id="3-Cookie的传输"><a href="#3-Cookie的传输" class="headerlink" title="3 Cookie的传输"></a>3 Cookie的传输</h3><p>简单地说，cookie 就是浏览器储存在用户电脑上的一小段文本文件。cookie 是纯文本格式，不包含任何可执行的代码。一个 Web 页面或服务器告知浏览器按照一定规范来储存这些信息，<strong>并在随后的请求中将这些信息发送至服务器</strong>，Web 服务器就可以使用这些信息来识别不同的用户。大多数需要登录的网站在用户验证成功之后都会设置一个 cookie，只要这个 cookie 存在并可以，用户就可以自由浏览这个网站的任意页面。再次说明，cookie 只包含数据，就其本身而言并不有害。</p><p><strong>同域情况下，Cookie会在随后的请求中携带</strong></p><h3 id="4-跨域登录"><a href="#4-跨域登录" class="headerlink" title="4 跨域登录"></a>4 跨域登录</h3><p><strong>跨越定义</strong> :由于浏览器同源策略，凡是发送请求的url的协议(http和https)、域名（<a href="http://www.example.com,about.example.com)、端口(8010和8020)三者之间任意一个与当前页面地址不同则视为跨域./">www.example.com,about.example.com）、端口(8010和8020)三者之间任意一个与当前页面地址不同则视为跨域。</a></p><h4 id="4-1-解决同源策略"><a href="#4-1-解决同源策略" class="headerlink" title="4.1 解决同源策略"></a>4.1 解决同源策略</h4><p>基于Session和Token登录都要解决。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">浏览器的同源策略</a></p><p>如果使用同域的方法，那么浏览器会抛出如下错误。demo示例，前端运行在<code>http://localhost:8010/login.html</code>，后台运行在<code>http://localhost:8020/api/login.php</code></p><p><img src="https://images2018.cnblogs.com/blog/59618/201808/59618-20180818025037687-514830877.png" alt="Access-Control-Allow-Origin"></p><p>需要在服务器端设置<code>Header</code>，以PHP为例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">header</span>(&#x27;Access-Control-<span class="hljs-literal">Allow</span>-Origin: http://localhost:<span class="hljs-number">8010</span>&#x27;);<br></code></pre></td></tr></table></figure><p>设置完成之后，可以发送请求了，登录成功之后跳转到<code>home.html</code>还是显示未登录，会跳转到<code>login.html</code>页面。效果如下图：</p><h4 id="4-2-解决请求带上Cookie信息"><a href="#4-2-解决请求带上Cookie信息" class="headerlink" title="4.2 解决请求带上Cookie信息"></a>4.2 解决请求带上Cookie信息</h4><p>基于Session登录才需要，因为相关信息是通过Cookie传入，如果是通过url传入，也不需要解决这个。基于Token，后续请求携带token都是通过header里面的字段，所以也不需要解决这个。</p><p>跨越情况下，浏览器此时不会默认在后续请求里面携带上<code>Cookie</code>信息，这个时候前后端都需要设置。以<code>jQuery</code>和<code>PHP</code>为列。</p><p>前端<code>jQuery</code>代码<br>Ajax请求中药设置<code>xhrFields</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">xhrFields:</span> &#123;<br>        <span class="hljs-attr">withCredentials:</span> <span class="hljs-literal">true</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8020/api/login.php&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">username</span>: $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(),<br>        <span class="hljs-attr">password</span>: $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>()<br>    &#125;,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>    <span class="hljs-attr">xhrFields</span>: &#123;<br>        <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">debugger</span>;<br>    $(<span class="hljs-string">&quot;#log&quot;</span>).<span class="hljs-title function_">html</span>(response.<span class="hljs-property">message</span>);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;home.html&quot;</span>;<br>&#125;).<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">jqXHR, textStatus</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Request failed: &quot;</span> + textStatus);<br>&#125;);<br></code></pre></td></tr></table></figure><p>后端<code>php</code>代码</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/*需要设置这一行，接收传入Credentials字段*/</span><br><span class="hljs-keyword">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials: true&#x27;</span>);  <br><span class="hljs-keyword">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin: http://localhost:8010&#x27;</span>);<br></code></pre></td></tr></table></figure><p>Demo代码下载：<a href="https://share.weiyun.com/5Nm46eU">https://share.weiyun.com/5Nm46eU</a></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://segmentfault.com/a/1190000009518499">HTTP无状态协议和cookie、session原理</a></p><p><a href="http://bubkoo.com/2014/04/21/http-cookies-explained/">HTTP cookies 详解</a><br><a href="http://www.cnblogs.com/lyzg/p/6067766.html">3种web会话管理的方式</a></p><p><a href="https://coolshell.cn/articles/5353.html">你会做WEB上的用户登录功能吗？</a></p><p><a href="http://insights.thoughtworkers.org/web-app-authentication/">登录工程：现代Web应用中的身份验证技术</a></p><p><a href="https://www.jianshu.com/p/e613a00510dd">angular和jquery的 withCredentials用法</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>登录</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Amazon Honeycode低零代码开发平台初体验</title>
    <link href="/2021/08/08/intro-amazon-honeycode/"/>
    <url>/2021/08/08/intro-amazon-honeycode/</url>
    
    <content type="html"><![CDATA[<h2 id="Amazon-Honeycode平台介绍"><a href="#Amazon-Honeycode平台介绍" class="headerlink" title="Amazon Honeycode平台介绍"></a>Amazon Honeycode平台介绍</h2><blockquote><p><strong>Amazon Honeycode 是 Amazon 提供的全托管低零代码开发平台</strong>。作为一种协作式应用程序构建工具，该平台可以帮助团队提高生产力并按照自己的方式工作。用户可以将Amazon Honeycode用于几乎任何事情：团队任务管理、项目计划、事件管理以及定期更新或状态报告等。</p></blockquote><p>Amazon HoneCode主要目标：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b6a0a93b26441ac90786d1596dadce1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="Simple-To-Do模板"><a href="#Simple-To-Do模板" class="headerlink" title="Simple To-Do模板"></a>Simple To-Do模板</h2><p>创建workbook支持三种方式，分别是，我们展示使用<strong>Simple To-Do</strong>模板。</p><ol><li>从头创建</li><li>导入csv文件</li><li>使用模板</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6010a2c55e34293aded4fcc9776f5b0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>支持使用Tables(数据)、Builder(界面构建)、Automations(流程自动化)。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18f7ee28fa88474ab2e165e3bfc33882~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="手机和PC查看"><a href="#手机和PC查看" class="headerlink" title="手机和PC查看"></a>手机和PC查看</h2><p><strong>手机端</strong><br>手机端需要安装iOS或者Android客户端。因为没有针对中国市场特殊化定制，官网上面的Android版本是Google Play商店，苹果用户可以直接安装，经测试，访问速度还挺快。国内开发者或者用户可以通过APKPure网站下载。下载链接是：<a href="https://apkpure.com/cn/amazon-honeycode/com.amazon.aws.honeycode">https://apkpure.com/cn/amazon-honeycode/com.amazon.aws.honeycode</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/679038a9f306411da21081cbc90a7402~tplv-k3u1fbpfcp-watermark.image" alt="首页.jpg"><br>列表任务<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a01d82c8af34ecbb90a09dd7452a7d3~tplv-k3u1fbpfcp-watermark.image" alt="任务列表.jpg"></p><p>添加任务</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac7b85275d2c4e4ebb025eba0a0ea298~tplv-k3u1fbpfcp-watermark.image" alt="添加任务.jpg"><br>编辑任务</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffd21b26d6ef4111b4d07ca1002e3050~tplv-k3u1fbpfcp-watermark.image" alt="编辑任务.jpg"><br><strong>PC端</strong></p><p>列表任务<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f10bdbc600041b6901c634f691f31c0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>添加任务</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aaf7574c31941a3b5dfb72b25eddea9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>编辑任务</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0a7b59a8a5c4cb9b81381a32f679a11~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/882fcd7b68f34a249f9dbb7d8456c4c8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol><li>其他很多低代码平台可能主要面向企业，而Honeycode的口号是面向团队，所以更多是鼓励业务人员通过拖拽或者熟悉excel来开发团队或者企业内的应用。先团队，后企业。</li><li>支持手机和PC两端访问，可以有2套样式，也可以Mobile和Web自适应。腾讯云的微搭还可以支持小程序。</li><li>20个成员免费，这样小型公司或者team可以免费体验，相对于微软的Power Apps需要购买office365才能正常使用。</li><li>plus和pro版本支持使用企业或者组织使用自己的Single Sign-on(SSO单点登录)。Amazon不强制用户绑定他们的账号，相对于微软、腾讯（企业微信用户信息）和阿里（钉钉用户信息），更灵活自由。因为很多企业或者团队本身自己实现了单点登录或者采用其他第三方单点登录。</li></ol><p>价格计划<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee99d2d2bb14429a997f53309e681a46~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>价格链接：<a href="https://www.honeycode.aws/pricing">https://www.honeycode.aws/pricing</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Amazon Honeycode提供在线课程，8小节，大概需要2个小时就可以学习完成。属于入门课程，通俗易懂。课程链接：<a href="https://learn.honeycode.aws/honeycode-essentials#/">https://learn.honeycode.aws/honeycode-essentials#/</a></p><p>至此，国际和国内6大云厂商都发布了各自的低零代码平台。</p><p><strong>国际3大云巨头</strong></p><ul><li>Google的AppSheet：<a href="https://cloud.google.com/appsheet">https://cloud.google.com/appsheet</a></li><li>Microsoft的Power Apps：<a href="https://powerapps.microsoft.com/zh-cn/">https://powerapps.microsoft.com/zh-cn/</a></li><li>Amazon的Honeycode：<a href="https://www.honeycode.aws/">https://www.honeycode.aws</a></li></ul><p><strong>国内3大云巨头</strong></p><ul><li>阿里-易搭： <a href="https://yida.alibaba-inc.com/">https://yida.alibaba-inc.com/</a></li><li>腾讯-微搭：<a href="https://cloud.tencent.com/product/weda">https://cloud.tencent.com/product/weda</a></li><li>百度-爱速搭建：<a href="https://cloud.baidu.com/product/isuda.html">https://cloud.baidu.com/product/isuda.html</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2019年五一-无锡三国城</title>
    <link href="/2019/05/03/international-workers-day-travel/"/>
    <url>/2019/05/03/international-workers-day-travel/</url>
    
    <content type="html"><![CDATA[<h3 id="1-景点介绍"><a href="#1-景点介绍" class="headerlink" title="1. 景点介绍"></a>1. 景点介绍</h3><p><img src="/img/international-workers-day-travel/1.jpg" alt="image"><br>介绍：无锡三国影视城（Wuxi Three Kingdoms Film and Television City）又名中央电视台无锡影视基地，位于江苏省无锡市美丽太湖畔，是国家首批国家AAAAA级旅游景区，也是中国首创的超大规模全沉浸式影视拍摄和旅游基地。</p><p>地址：江苏省无锡市滨湖区山水西路太湖之滨</p><p>级别：5A风景区 票价：85元。</p><p><strong>提示</strong> 三国城和旁边的水浒城，大同小异，所以推荐游玩三国城就可以。</p><h3 id="2-自驾路线"><a href="#2-自驾路线" class="headerlink" title="2. 自驾路线"></a>2. 自驾路线</h3><p>团长自驾走的省道，速度慢，但是无高速公路费。如果想快一点，可以走高速。五一节假日，高速免费，但是也有可能拥堵。<br><img src="/img/international-workers-day-travel/2.png" alt="image"></p><p>高速线路：<br><img src="/img/international-workers-day-travel/3.png" alt="image"></p><h3 id="3-游玩线路和景点"><a href="#3-游玩线路和景点" class="headerlink" title="3. 游玩线路和景点"></a>3. 游玩线路和景点</h3><p><img src="/img/international-workers-day-travel/4.png" alt="image"></p><p>进入景区左手边就是《三英战吕布表演》，看完表演之后，可以按照标记的线路进行游玩。适合边看边照片。<br><img src="/img/international-workers-day-travel/5.jpg" alt="image"></p><ol><li>桃园和三国人物雕塑群<br> <img src="/img/international-workers-day-travel/6.jpg" alt="image"></li><li>神龙殿<br> <img src="/img/international-workers-day-travel/7.jpg" alt="image"><br> <img src="/img/international-workers-day-travel/8.jpg" alt="image"></li><li> 八卦阵（有很多小野花，非常漂亮）</li><li> 甘露寺</li><li>香宁宫<br> <img src="/img/international-workers-day-travel/9.jpg" alt="image"></li><li> 特技场（火烧赤壁表演）</li><li>赤壁栈桥<br> <img src="/img/international-workers-day-travel/10.jpg" alt="image"></li><li> 吴王宫</li><li> 水军训练营</li><li>曹操楼船<br><img src="/img/international-workers-day-travel/11.jpg" alt="image"></li></ol><h3 id="4-温馨提示"><a href="#4-温馨提示" class="headerlink" title="4. 温馨提示"></a>4. 温馨提示</h3><ol><li> 有大型停车场，15元一次。</li><li> 上午10:30和下午16:00有《三英战吕布表演》，值得观看。</li><li> 景区不是特别大，如果不去水浒城，那么不建议购买公交票和租赁电动车</li><li> 景区再孙尚香酒楼附近有小吃点，价格不算太贵。</li><li> 湖边风比较大，可以带个外套。</li></ol><p><strong>最后祝大家五一快乐。</strong><br><img src="/img/international-workers-day-travel/12.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>假期</tag>
      
      <tag>无锡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年五一假期电影推荐</title>
    <link href="/2019/05/02/workers-day-film/"/>
    <url>/2019/05/02/workers-day-film/</url>
    
    <content type="html"><![CDATA[<h3 id="假期电影推荐"><a href="#假期电影推荐" class="headerlink" title="假期电影推荐"></a>假期电影推荐</h3><p>转眼五一四天小长假就要过去了，最后一天大家也陆续返程，享受长假最后一天，一般我会用一场电影结束假期，开启新一轮的工作。今天为大家推荐几部电影</p><h2 id="电影院上映"><a href="#电影院上映" class="headerlink" title="电影院上映"></a>电影院上映</h2><ol><li>《复联四》漫威粉估计早早就看了（自己不是，所以没有去看）</li><li>《何以为家》因为自己看电影从来不看简介，这样总会有意外惊喜。冲着高评分去的，根据真实故事改编，里面虽然没有直接表达战争的残酷，却贯穿整个电影。刚上映不剧透，唯一的感受就是要感谢和平，发自内心的笑是一种奢侈品，在我们可以的时候要珍惜。</li></ol><p><img src="https://static.liangbenshu.cn/1676379892755-2656cabb-e297-4b63-9d0a-24d1bda3e586.png" alt="何以为家"></p><ol start="3"><li>《调音师》马上下线了，有视频会员的可以等等，全程紧张，甚至看完了自己不敢走夜路，无数反转，一定要认真看开头和结尾，结局很开放，要自己去想，回来查看了很多影评才恍然大悟</li></ol><p><img src="https://static.liangbenshu.cn/1676379913733-379b52c2-1bc5-4bbe-980e-62d057ea6846.png" alt="调音师"></p><h2 id="宅在家里国内电影推荐"><a href="#宅在家里国内电影推荐" class="headerlink" title="宅在家里国内电影推荐"></a>宅在家里国内电影推荐</h2><ol><li>《无问西东》自己很少看过超过3次的电影，每一次看都很感动。前半部分不好理解，但是要认真去看，1小时之后会豁然开朗。</li><li>《心迷宫》看过2次，第一次很多细节没看懂。一部导演和演员都不认识的好作品</li><li>《狗十三》从叛逆到妥协</li><li>《盲山》现实世界的另一种存在</li></ol><h2 id="宅在家国外电影推荐"><a href="#宅在家国外电影推荐" class="headerlink" title="宅在家国外电影推荐"></a>宅在家国外电影推荐</h2><ol><li>《弱点》善良和鼓励可以成就一个人</li><li>《看不见的客人》看到最后才能体会到电影的精华</li><li>《一条狗的使命》题材很新颖，也很感动</li><li>《消失的爱人》爱与控制，最好2个人一起看，胆小的我看了竟然害怕</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>假期</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网观察-在线支付</title>
    <link href="/2019/05/02/online-payment/"/>
    <url>/2019/05/02/online-payment/</url>
    
    <content type="html"><![CDATA[<h3 id="1-在线支付历史"><a href="#1-在线支付历史" class="headerlink" title="1. 在线支付历史"></a>1. 在线支付历史</h3><p><img src="https://static.liangbenshu.cn/1676381728500-a612c726-b4d6-4bbc-88cb-686587bc4ba3.png"></p><p>在线支付伴随电商等交易平台发展而逐渐发展起来。国内电商平台早期基本都是支持银联在线支付。银联在线支付又分信用卡和借记卡两种。信用卡只要输入卡号和卡背面末尾三位数字，就可以完成支付。信用卡支付流程如下：</p><p><img src="https://static.liangbenshu.cn/1676381747011-b88af1c3-d2e3-4f08-88ae-2ac346f56f61.png"></p><p>借记卡一般要输入身份证号码，卡号和密码，预留手机号，验证码等信息，才能完成支付。支付流程如下：</p><p><img src="https://static.liangbenshu.cn/1676381754317-1d4a7651-b598-4b3f-b91b-abd68c34a99b.png"></p><p><strong>部分银行借记卡需先到银行网银或者银行营业网点开通无卡支付业务</strong></p><p>早期支付宝和微信支付未大规模推广和使用的情况下，主要以银联在线支付为主，其中使用信用卡支付模式居多。而且银联支付还需要安装客户端软件，对MacOS和Linux操作系统支持不好，在手机上打开浏览器支付，更是困难重重。</p><h3 id="2-新支付平台和方式"><a href="#2-新支付平台和方式" class="headerlink" title="2. 新支付平台和方式"></a>2. 新支付平台和方式</h3><h4 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h4><p><img src="https://static.liangbenshu.cn/1676381762933-69e5482a-3b49-47df-9af3-6f9b5d4ce5c8.png"></p><p>支付宝伴随着淘宝和天猫发展起来，买家和卖家沟通用淘宝旺旺，支付用支付宝，所以淘宝旺旺和支付宝是阿里巴巴2个重要的平台。</p><p><img src="https://static.liangbenshu.cn/1676381770564-27554e4f-afa7-4661-8bb0-5f1d49c6f5cb.png"></p><p><a href="https://wangwang.1688.com/">旺旺</a></p><p><a href="https://www.alipay.com/">支付宝</a></p><h4 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h4><p><img src="https://static.liangbenshu.cn/1676381781790-5d150de1-caaf-4868-9891-cc91d7b33de3.png"></p><p>微信支付起源于腾讯的财付通，早期在QQ上就可以使用财付通进行在线支付。后期微信发展起来之后，微信支付借助财付通平台打造支持PC网站和手机端支付平台。</p><p>新平台当然还有百度旗下的度小满支付。</p><p><a href="https://www.dxmpay.com/">度小满钱包</a></p><p><a href="https://pay.weixin.qq.com/">微信支付</a></p><h3 id="3-支付宝支付"><a href="#3-支付宝支付" class="headerlink" title="3. 支付宝支付"></a>3. 支付宝支付</h3><p>支付宝支付支持电脑网站支付、手机网站支付和App支付。</p><p><strong>网站支付</strong> 支持扫码和输入账号和密码支付。</p><p><img src="https://static.liangbenshu.cn/1676381806736-cb686d7a-ba71-4dca-aa42-66905ed971e1.png"></p><p><strong>手机网站支付</strong></p><blockquote><p>适用于商家在移动端网页应用中集成支付宝支付功能。<br>商家在网页中调用支付宝提供的网页支付接口调起支付宝客户端内的支付模块，商家网页会跳转到支付宝中完成支付，支付完后跳回到商家网页内，最后展示支付结果。若无法唤起支付宝客户端，则在一定的时间后会自动进入网页支付流程。</p></blockquote><p><img src="https://static.liangbenshu.cn/1676381826959-b5aa081f-823f-46af-b11c-f03db9e06b4d.png"></p><h3 id="4-微信支付"><a href="#4-微信支付" class="headerlink" title="4. 微信支付"></a>4. 微信支付</h3><p><img src="https://static.liangbenshu.cn/1676381837076-52474407-8f94-4df3-b7fe-a7759d492d19.png"></p><p><strong>JSAPI支付</strong></p><blockquote><p>JSAPI支付是指商户通过调用微信支付提供的JSAPI接口，在支付场景中调起微信支付模块完成收款。</p></blockquote><p>PC网站场景：在网站中展示二维码，用户扫描二维码后在微信浏览器中打开页面后完成支付。也可以是Mobile网站，要求必须在微信浏览器里面打开。</p><p><strong>H5支付-网页支付</strong></p><blockquote><p>H5支付是指商户在微信客户端外的移动端网页展示商品或服务，用户在前述页面确认使用微信支付时，商户发起本服务呼起微信客户端进行支付。主要用于触屏版的手机浏览器请求微信支付的场景。可以方便的从外部浏览器唤起微信支付。<br><strong>唤醒微信支付</strong></p></blockquote><p><a href="https://pay.weixin.qq.com/static/product/product_intro.shtml?name=h5">H5支付</a></p><p><strong>APP支付</strong></p><blockquote><p>APP支付是指商户通过在移动端应用APP中集成开放SDK调起微信支付模块来完成支付。适用于在移动端APP中集成微信支付功能的场景。</p></blockquote><p>需要APP开发者集成支付SDK。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h3><p>随着移动平台越来越发达，手机支付平台渗透率越来越高。而且支付宝支持花呗，类似以前的信用卡，年轻人群体中使用支付宝多一些。但是涉及到红包或者水果超时付账，中老年人更偏向微信，不需要额外装一个软件，而且平时红包里面也有子女发来的红包或者转账过来的钱。</p><p>支付平台主要集中在微信支付和支付宝2大平台。支付方式大体分为以下集中：</p><ol><li>付款码支付，适合线下场所面对面收银的场景。</li></ol><p><img src="https://static.liangbenshu.cn/1676381852558-2652ef9e-7a55-47f6-b10a-5f43279a8daf.png"></p><ol start="2"><li>扫码支付，适合PC网站，实体店单品或者订单。自动贩卖机、火车站购票机使用。用户通过支付宝/微信扫描二维码支付。</li><li>App支付，移动端APP集成SDK，唤醒支付宝或微信进行支付，常见如淘宝、京东手机客户端</li><li>H5/网页支付，支付宝是打开网页输入账号和密码进行支付，适用于PC和Mobile网站。在微信客户端外的移动端网页使用，唤醒微信客户端支持，不支持PC网站。另外在微信客户端打开的英东网页或者公众号打开的网页，可以使用JSAPI进行支付。</li><li>小程序支付，各自的平台支持小程序这种新模式支付方式。</li></ol><p><strong>支付宝还支持刷脸付，不过用的相对较少</strong></p><p><img src="https://static.liangbenshu.cn/1676381868108-ee241899-fa39-4bf1-968b-54a56ea4b86c.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>互联网</tag>
      
      <tag>支付宝</tag>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做好一个开发者</title>
    <link href="/2019/04/04/i-am-developer/"/>
    <url>/2019/04/04/i-am-developer/</url>
    
    <content type="html"><![CDATA[<h3 id="开发者定义"><a href="#开发者定义" class="headerlink" title="开发者定义"></a>开发者定义</h3><p><img src="https://static.liangbenshu.cn/1676382938324-13d94ea4-b1e6-41a9-8a53-245133962d7a.png"></p><p>研发人员：是相对公司管理人员、职能人员、销售和市场人员来定义。前端、后台、设计、产品、移动客户端、数据库、大数据等都可以定义研发。国外称之为开发者，英文：Developer。比如</p><p>前端开发者：Front End Web Developer</p><p>后端开发者：Back End Web Developer</p><p>全栈开发者：Full Stack Developer</p><p><img src="https://static.liangbenshu.cn/1676382978002-04b78439-8ee2-4696-8fce-f36a579b928f.png"></p><p>开发者和其他做技术的人一样，也是手艺人。只是我们借助的工具是计算机，通过设计或者开发软件、App等，服务客户和使用者。</p><p>作为一个开发者，最重要技能就是写代码，写文档，而这些恰恰是很多开发者不具备的能力。如果一个团队成员不敏捷，不高效，那么很难做到一个团队的敏捷和高效，管理稍微不善，团队就陷入泥潭。</p><h3 id="左手代码"><a href="#左手代码" class="headerlink" title="左手代码"></a>左手代码</h3><h4 id="1-需求不明确"><a href="#1-需求不明确" class="headerlink" title="1.需求不明确"></a>1.需求不明确</h4><p>作为一个开发者，从产品经理和客户经理那边得到需求之后，一定是先想清楚客户需要什么内容，当然大多数客户也不知道想要什么，可能是天马行空的想法，你们研发先做做看，我看哪个好用哪个？需求不明确，导致大量返工。<br><img src="https://static.liangbenshu.cn/1676383058161-9abdaef0-b539-49e9-8e86-d4803d76052f.png"></p><p>这个需求是客户要想看到云主机性能数据，包括实时和历史。前端实现2个tab简单，代码逻辑也用一份，里面判断一下是哪个tab，然后决定是否显示日历控件。实时默认5分钟，历史支持用户自己选择时间段。</p><p>通过分析需求，可以看到这2个tab可以合并为1个，因为除了时间段不一样，其他都是一样。默认时间控件选择5分钟，如果用户选择了之前就是历史，不能选择未来时间。</p><p>大多数研发只知道接需求，做开发，具体客户想要什么，如何去实现更优化考虑的少。有时经常觉得我们不是开发功能，是在堆功能。</p><h4 id="2-代码分支管理混乱"><a href="#2-代码分支管理混乱" class="headerlink" title="2.代码分支管理混乱"></a>2.代码分支管理混乱</h4><p>自从互联网和软件公司，从<code>SVN</code>切到<code>Git</code>做代码管理，开发和测试都觉得，公司档次瞬间提升了一些。我们能把代码管好，防止这个那个带来的代码问题。大家都想着去遵守Git流程最佳实践，如下图所示：</p><p><img src="https://static.liangbenshu.cn/1676383119142-e9e56753-153c-4ff7-acd3-5b998e62be79.png"></p><p>大家自己仓库里面用了<code>master</code>分支请举手？</p><p>大家仓库里面创建了<code>hotfix</code>分支并使用起来了，请举手？</p><p>Q:你们每次发布上线可以用<code>master</code>分支代码吗？</p><p>A:不可以，我们代码还在一个<code>release1.x.x</code>分支上。<code>master</code>分支是1年前的代码。</p><p>大多数部署和升级代码都无法从<code>master</code>分支拉去代码，而且有很多本地代码在开发者电脑里面。或者A提交了代码，B还没有获取，就开始构建镜像，然后去部署。</p><p>然后公司可能增加一个入库和出库操作，这个操作其实就是鸡肋，所有团队用这个里面镜像代码去升级，10次升级，有9.5次失败。我们是基于项目的产品迭代式开发，环境和依赖的内容实在太多。标准互联网公司，有一整套测试环境，开发环境，除了数据的多少之外，完全是一样的。</p><p>上一家公司做广告交易平台，涉及到广告展示和计费相关，所以他们升级都非常辛苦，但是速度很快，凌晨0点开始进行，大概2点就可以结束。得益于他们的开发、测试环境和生产环境一致，升级之前已经进行了充分的测试。当然现网有问题，也还是要遵循解决问题去修改代码或者配置。</p><p><strong>能不能在现网修改代码？</strong></p><p>我个人觉得互联网公司操作起来相对简单一些，完整的开发、测试、预发布和发布环境。对于软件公司，可能数据和底层组件的，比如和硬件相关的产品公司就相对不是那么简单。</p><p>1.如果是明显的错误，比如js报错，文案错误，样式出错，接口不通，那么这些都是研发和测试问题，这个可以加入业绩考核；</p><p>2.依赖现网环境和底层，开发和测试没有环境，这个就应该在升级就指出，需要现网调试。如果这个要改动代码，那么也是可以接受。发布和升级的目的是提供产品质量和增加新功能。</p><h4 id="3-代码没有防御性编程"><a href="#3-代码没有防御性编程" class="headerlink" title="3.代码没有防御性编程"></a>3.代码没有防御性编程</h4><p>我写前端多，就以前端举例。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scilab">userService.getUserList().success(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(response)</span>&#123;</span><br>        <span class="hljs-keyword">if</span>(response.success)&#123;<br>            ctrl.userList = response.entity.<span class="hljs-built_in">list</span>;<br>            <span class="hljs-comment">//这样写可以吗？</span><br>            ctrl.selectedUser=ctrl.userList[<span class="hljs-number">0</span>];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            messageService.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;用户获取失败&quot;</span> + response.message);<br>        &#125;<br>    &#125;).<span class="hljs-built_in">error</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span>&#123;</span><br>        console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">error</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure><p>大家很容易写出这个代码。开发和测试的时候大家都觉得没有问题，然后一上线，Javascript报错。请求后端返回数组为空，<code>ctrl.userList[0]</code>报错。</p><p>防御性写法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(ctrl.userList.lenghth&gt;<span class="hljs-number">0</span>)</span></span>&#123;<br>    ctrl.selectedUser=ctrl<span class="hljs-selector-class">.userList</span><span class="hljs-selector-attr">[0]</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-单词拼写错误"><a href="#4-单词拼写错误" class="headerlink" title="4.单词拼写错误"></a>4.单词拼写错误</h4><p><code>method</code>写成<code>metohd</code>,<code>singal</code>写成<code>signal</code>,“块存储”写成“快存储”等。</p><h3 id="右手文档"><a href="#右手文档" class="headerlink" title="右手文档"></a>右手文档</h3><h4 id="1-不愿写文档"><a href="#1-不愿写文档" class="headerlink" title="1.不愿写文档"></a>1.不愿写文档</h4><p>程序员最喜欢干的两件事：<br>1.讨厌写文档</p><p>2.套压别人不写文档</p><h4 id="2-问题描述太笼统"><a href="#2-问题描述太笼统" class="headerlink" title="2.问题描述太笼统"></a>2.问题描述太笼统</h4><p>需求创建了一个jira，标题 如下：<br><img src="https://static.liangbenshu.cn/1676383224245-bb77be6e-9b5d-4d1c-b38b-69a125362166.png"><br>晚上升级因为这个需求在最开始没有详细讨论，导致晚上后台发现要注意如下这些问题。<br><img src="https://static.liangbenshu.cn/1676383229680-3b5932f9-6cd2-45f6-b953-713a116745f8.png"></p><h4 id="3-文档归类混乱"><a href="#3-文档归类混乱" class="headerlink" title="3.文档归类混乱"></a>3.文档归类混乱</h4><p>接口文档写了，修改了不进行更新。同一个开发团队，有的人用<code>domain</code>,有的人用<code>domainId</code>，实际代表名称是安全域ID；有的用<code>host</code>,有的用<code>hostName</code>，实际代表的也是宿主机名称。</p><p>需求当时做好了，下次新人加入或者回归测试，开发功能的小伙伴和测试这块的小伙伴不在现场，全部人员蒙住了，不知道啥逻辑，找文档找不着，要翻1年前的邮件。</p><p>笨方法是在代码加一些注释，最起码看代码能看出来。</p><h3 id="如何改进"><a href="#如何改进" class="headerlink" title="如何改进"></a>如何改进</h3><h4 id="1-代码改进"><a href="#1-代码改进" class="headerlink" title="1.代码改进"></a>1.代码改进</h4><p>人：招聘、培训和绩效三方面提升研发本身人员的素质</p><p>流程自动化：机器能干的，就不要用人去干。比如前端增加ESLint，单元测试，E2E测试，后端单元测试，发布之前进行集成测试，每日构建。</p><p>严格的线上和线下代码审查。迭代速度要放慢，一直催着加这个功能，修复那个地方bug，能集中时间写代码的时间就很少。</p><h4 id="2-文档改进"><a href="#2-文档改进" class="headerlink" title="2.文档改进"></a>2.文档改进</h4><p>好好利用现有的工具。</p><p>需求等重要信息分模块写入conf上。</p><p>接口文档统一存放GitHub或者内部其他有历史记录的系统上，有更新记得及时更新。</p><p>作为一个研发，关注和写好以下文档：</p><ol><li>本次迭代功能清单。Jira列表，其实可以细分到更小的子任务。需求写</li><li>本次升级方案和测试用例。测试写</li><li>本次迭代内容。比如新增了哪些功能，修复了哪些bug。开发写</li><li>本次升级记录和遗留问题反馈。开发写</li><li>看好和理清需求文档。共同</li><li>写好接口文档。前后端研发</li></ol><p>做好敏捷个人，才有敏捷团队。<strong>最重要：执行到位</strong><br><img src="https://static.liangbenshu.cn/1676383311176-dd7b3ca2-88fa-4b17-8328-03a3ee8423ca.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>敏捷开发</tag>
      
      <tag>敏捷个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社交恐惧症</title>
    <link href="/2016/08/18/social-phobia/"/>
    <url>/2016/08/18/social-phobia/</url>
    
    <content type="html"><![CDATA[<h2 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h2><p>主要作用是为一群拥有相同兴趣与活动的人创建在线社区。这类服务往往是基于互联网，为用户提供各种联系、交流的交互通路，如电子邮件、即时通信服务等。此类网站通常通过朋友，一传十、十传百地把网络展延开去，就像树叶的脉络，华语地区一般称之为“社交网站”。英文叫:Social Network。</p><p>社交网络的兴起主要的是国外的Facebook和Twitter，中国的新浪微博和人人网带动起来的。当然顶峰时期，国外做社交网络的还有很多，比较出名的有Google+,Myspace。据说半死不活，和国内的鹅厂的腾讯微博差不多，国内还有开心网等等。</p><p>国内目前最广泛，占用网民最多时间的三大社交网络服务是：</p><p>1.微信<br>2.QQ<br>3.微博<br>后面几名应该有陌陌、豆瓣和百度贴吧。我自己手机安装的软件(部分)如下，有微博、微信，QQ和豆瓣。<br><img src="https://static.liangbenshu.cn/1681043744949-424e73d0-1eb3-4056-997c-495953dd2ca5.jpg"></p><h2 id="国内三大社交网络平台"><a href="#国内三大社交网络平台" class="headerlink" title="国内三大社交网络平台"></a>国内三大社交网络平台</h2><h3 id="1-微博"><a href="#1-微博" class="headerlink" title="1.微博"></a>1.微博</h3><p>同事中使用微博的人还不是特别多，我个人习惯刷微博的原因，主要是之前在上海坐地铁无聊，而且最新和最快的新闻都是从微博发出来，因为微博更面向开放社交环境，而微信更加私密一些。一般都是同事、同学或朋友。你能加到影视明星的微信？基本不可能。但是微博提供了一个小时候，学校女生通过杂志或者购买磁带，或者贴纸来追星的平台。从纸质转向互联网平台，任何人只要注册一个微博账号，都可以来关注明星、大V，意见领袖或企业家。</p><p>微博刚不久发布的财报，数字非常好。得益于去年开始火起来的直播。我个人是觉得直播真的很无聊。今天新闻还说，很多人加入到王宝强的直播室，看着漆黑的背景，一群人在刷弹幕。网民的行为很多时候，网民是无法用正常的思维去看待的。关注的人越多，你的主页就更多内容。</p><h3 id="2-QQ"><a href="#2-QQ" class="headerlink" title="2.QQ"></a>2.QQ</h3><p>腾讯确实一家非常牛逼的公司，在做出QQ软件之后，能继续做出面向移动互联网的社交工具-微信，实在值得佩服。其实腾讯对QQ和微信的定义是，QQ主要面向PC，Mobile为辅，围绕QQ空间，三位一体进行发展。应该说在2010年，QQ的生态体系主要是围绕着3个产品来做的，当然辅助的还有腾讯视频，腾讯音乐等。进一步把人口红利和流量导向到腾讯最赚钱的产品-腾讯游戏。但是我现在也没有明白的是，QQ空间上传图片为什么还要我开钻呢?视频直接使用腾讯视频托管不行吗?</p><h3 id="3-微信"><a href="#3-微信" class="headerlink" title="3.微信"></a>3.微信</h3><p>微信一开始就是为了迎接移动互联网而来，所以到现在为止，你在PC端登录微信，必须扫二维码。就是你必须带着你的手机，你才可以用PC上的微信客户端。今天微信Mac客户端更新到v2.0.0版本，功能基本上和微信 for Windows版本基本一致了。作为一个移动互联网为目标的产品，现在也越来越多在PC客户端上使用，不知道产品经理-张小龙是一种什么样的心情。那照着这样迭代开发下去，QQ客户端怎么办? 我个人在公司的电脑上，IM客户端有3个，QQ、微信和飞信(公司内部推荐使用的IM)。用着用着发现自己都有一点分裂症的趋向。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上三个社交平台，都花费了你不少的碎片化时间。有时都成为一种习惯，刚刷的微博，没过多久又刷一遍。朋友圈看一遍又一遍，人有时很矛盾，如果大家都不发朋友圈，那朋友圈就要长草了，但是你要是做微商，一直发面膜相关的，大家又反感你。所以这中间有个度，还需要大家中间把握。通过观察我个人的QQ和QQ空间，大家都不怎么在QQ聊天了，QQ空间最新一篇日志还是去年写的。随着微信和朋友圈的成熟，大家分享的内容都转移到微信平台上了。而且微信公众号媒体和服务属性非常好，看完公众号新闻，就可以在下面留言评论。</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://movie.douban.com/subject/3205624/">社交网络</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信</tag>
      
      <tag>QQ</tag>
      
      <tag>微博</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Live Messager到Skype看即时通讯</title>
    <link href="/2013/01/09/livemessager-to-skype/"/>
    <url>/2013/01/09/livemessager-to-skype/</url>
    
    <content type="html"><![CDATA[<p><img src="https://static.liangbenshu.cn/1680699700800-46cd8aa5-eb2d-4f46-a631-77faf6524b8f.png"></p><h2 id="MSN结束使命"><a href="#MSN结束使命" class="headerlink" title="MSN结束使命"></a>MSN结束使命</h2><p>今天各大IT相关的网站都有关于“微软确认Messenger于3月15日结束使命”的新闻。然后其中又提及到“中国内地用户不受影响，可以继续使用”。然后很多人就开始各种吐槽。微软的要没落，或者微软的技术不行，产品做得不好等等。</p><h2 id="Skype接替"><a href="#Skype接替" class="headerlink" title="Skype接替"></a>Skype接替</h2><p>其实Windows Live Messager或者Skype也好，都是微软在即时通讯领域的一款产品，当然产品的性能和用户体验也各不相同。微软收购Skype之后，大家估计都想到微软迟早是要整合它的即时通讯产品线。只是速度来的太快，昨天大家在办公室都是使用MSN，今天就要开始使用Skype了。即时通讯产品其实可以分为2种，一种是针对广大普通用户，另外一种是针对企业的工作人员。</p><h2 id="企业级IM-Lync"><a href="#企业级IM-Lync" class="headerlink" title="企业级IM-Lync"></a>企业级IM-Lync</h2><p>所以微软在这两个方面都有自己的产品和战略目标。普通用户：MSN-&gt;Skype;企业用户：Lync。Lync从Live Meeting或者Office Communicator产品升级换代过来，从功能和用户体验来说都非常的好，当然估计价格也不低。我们公司现在用的就是Lync，结合Lync Server使用。不知道未来微软是不是也把Lync整合到Skype，很难说。MSN基本是靠广告赚钱，而Lync应该是靠卖license，同时需要Windows Server的支持，所以还是靠卖软件或license赚钱。而Skype不同，可以卖点卡。国内一直在炒“虚拟运营商”，其实很多时候大公司已经把我们的理念转换成现场的东西和产品，只是我们有时没有发现而已。通过带宽来传输语音和视频数据，同时可以实现pc-手机，pc-pc之间的通话。</p><h2 id="中国市场"><a href="#中国市场" class="headerlink" title="中国市场"></a>中国市场</h2><p>至于微软为什么特别强调，中国内地用户不受影响，估计一方面政策有一些难处理的地方，另外一方面估计是微软不想那么早就和中国三大运营商抢市场。我之前去印度实习时，同学买的skype卡打国际长途回国，质量非常不错，也很便宜，好像是1块多一点。回来之后，我觉得这个比打手机便宜，打国内只要7分钱，我就买了100块的点卡。后来我发现我买吃亏了，国内使用skype或者uucall打长途，质量根本不行，而已有时还可以听见第三个人在讲话，杂音也很多，我也试着去tom skype（中国版skype）投诉，客服也不好说什么，就说我的设备是不是有问题之类的。</p><h2 id="IM的未来"><a href="#IM的未来" class="headerlink" title="IM的未来"></a>IM的未来</h2><p>即时通讯领域用户量大，但是通过用户来赚钱还是有点难度。大家肯定马上会想到<strong>腾讯</strong>和<strong>QQ</strong>不就是靠着用户数量大来发家致富的吗？估计那时以前，现在QQ空间或者QQ打广告赚钱也没有那么容易，现在的孩子也不会那么容易冲动去申请QQ会员，黄钻，绿钻，红钻等。QQ和腾讯RTX也是通讯针对普通用户和企业用户开发的，不知道国内有多少企业使用腾讯RTX，但是RTX的二次开发接口很多，所以方便企业进行二次开发，或者将它集成到企业现有的系统中。</p><h2 id="美国对标产品-Webex"><a href="#美国对标产品-Webex" class="headerlink" title="美国对标产品-Webex"></a>美国对标产品-Webex</h2><p>其实我第一次接触到企业即时通讯软件还是Webex，中国人创办的美国网讯公司开发的产品。思科也正是看到企业即时通讯的发展未来，所以花大价钱收购了Webex。Webex在视频通话，即时通讯，视频会议，远程授课等很多方面都有突出的表现。然后思科就和企业的IT技术人员说，用我们的Webex系统，我们的这款路由器或者交换机对Webex的通讯有更好的优化或者支持，然后鼓励用户购买它的网络设备。当然这仅仅是个人的看法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>技术肯定是越来越好，所以我们不能因为看到短期内一款产品的消失或者退出历史舞台，我们去判断一个公司或者一个技术领域的发展未来。我们有时应该注重的是：用最经济的方法创造更多的财富。</p><p>参考链接：<br><a href="https://baike.baidu.com/item/Lync/1793288">Lync</a><br><a href="https://baike.baidu.com/item/WebEx">WebEx</a><br><a href="https://baike.baidu.com/item/RTX%E8%85%BE%E8%AE%AF%E9%80%9A/6178829?fromtitle=rtx&fromid=2024258">RTX腾讯通</a></p>]]></content>
    
    
    <categories>
      
      <category>互联网观察</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IM</tag>
      
      <tag>skype</tag>
      
      <tag>微软</tag>
      
      <tag>Webex</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
